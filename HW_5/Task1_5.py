"""
Задание 1. Написать программу, которая будет складывать, вычитать,
умножать или делить два числа. Числа и знак операции вводятся пользователем.
После выполнения вычисления программа не должна завершаться, а должна
запрашивать новые данные для вычислений. Завершение программы должно
выполняться при вводе символа '0' в качестве знака операции. Если пользователь
вводит неверный знак (не '0', '+', '-', '*', '/'), то программа должна
сообщать ему об ошибке и снова запрашивать знак операции.
Также сообщать пользователю о невозможности деления на ноль,
если он ввел 0 в качестве делителя.
Подсказка:
Вариант исполнения:
- условие рекурсивного вызова - введена операция +, -, *, / - ШАГ РЕКУРСИИ
- условие завершения рекурсии - введена операция 0 - БАЗОВЫЙ СЛУЧАЙ
Решите через рекурсию. В задании нельзя применять циклы.
Пример:
Введите операцию (+, -, *, / или 0 для выхода): +
Введите первое число: 214
Введите второе число: 234
Ваш результат 448
Введите операцию (+, -, *, / или 0 для выхода): -
Введите первое число: вп
Вы вместо трехзначного числа ввели строку (((. Исправьтесь
Введите операцию (+, -, *, / или 0 для выхода)
"""


def calculate(a, b, relation):
    if relation == '+':
        return a + b
    elif relation == '-':
        return a - b
    elif relation == '*':
        return a * b
    else:
        return a / b


def correct_operation(relation):
    return relation == '0' or relation == '+' or relation == '-' or \
        relation == '*' or relation == '/'


def inp_operation():
    return input('Введите операцию: ')


def run_calculator(a=None, b=None):
    if a is None:
        a = float(input('a: '))
    if b is None:
        b = float(input('b: '))
    relation = inp_operation()
    if not correct_operation(relation):
        print('Ошибочная операция')
        run_calculator(a, b)
        return
    elif relation == '0':
        return
    elif relation == '/' and b == 0:
        print('Деление на ноль невозможно')
        run_calculator()
        return
    else:
        print(calculate(a, b, relation))
        run_calculator()


run_calculator()
